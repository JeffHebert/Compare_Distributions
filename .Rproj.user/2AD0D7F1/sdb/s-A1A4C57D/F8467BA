{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# This Shiny App allows the user to manually fit distributions to sample data.\n# The sample data is provided in the R defalut installation in the datasets package.\n#\n# Code by Jeff Hebert, 11/8/2014\n\nlibrary(shiny)\n\n\nshinyServer(function(input, output) {\n\n    \n    # Generate instructions for how to use this app\n    output$instructions <- renderText({\n\"This app will allow you to visualize how shape and scale parameters affect a theoretical distribution. \nThe data used by this app is available in the datasets package which comes installed with base R.\n\nTo use this app, \nselect a sample data set then \nadjust the mean and standard deviation parameters.\n\nCheck Show best fit to add a fitted distribution for the dataset.\"\n    })\n    \n    output$distPlot <- renderPlot({\n        # Create lists for analysis and charting\n        idx <- as.integer(input$data_set)                                            # Index of data set chosen in UI\n        data_set <- list(airmiles/1000, treering*100, trees$Height, morley$Speed/10) #Scale data\n        x_label <- list(\"Thousands of Airmiles\", \"Ring Width\", \"Tree Height\", \"Speed of Light\")\n        main_label <- list(\"Histogram of Airmiles\", \"Histogram of Tree Ring Width\", \"Histogram of Tree Height\", \"Histogram of Measured Speed of Light\")\n        data_desc <- list(\"Airline Miles\", \"Tree Rings\", \"Tree Height\", \"Speed of Light\")\n        \n        #Troubleshooting code - safely delete later\n        #output$value <- renderPrint({ input$show_fit })\n        #output$value <- renderPrint({ head(data_set[[1]],3) })\n        #output$value <- renderPrint({ head(data_set[[idx]],3) })\n        # generate bins based on input$bins from ui.R\n        \n        # Get x data and histogram bins based on input from ui.R\n        x <- data_set[[idx]]\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\n        \n        # draw the histogram with the specified number of bins\n        h <- hist(x, breaks = bins, col = 'darkgray', border = 'white', xlab = x_label[idx], main = main_label[idx])\n        \n        # Add proposed density plot\n        x_min <- min(bins)\n        x_max <- max(bins)\n        n_obs <- length(x)\n        \n        # Calculate density for selected distribution\n        x_seq <- seq(from = x_min, to = x_max, by = (x_max-x_min)/100)\n        x_den <- dnorm(x_seq, mean = input$proposed_mean, sd = input$proposed_sd)\n        \n        # Calculate scale factor for histogram as chart max / density max\n        c_sf <- max(h$counts) / max(x_den)\n        \n        # Add density to histogram in blue\n        lines(x_seq, c_sf*x_den, lwd = 3, col=\"blue\")\n        \n        # If best fit selected, add best fit in black\n        if(input$show_fit){\n            x_mean <- round(mean(x),1)\n            x_sd <- round(sd(x),1)\n            x_sf <- max(h$counts) / dnorm(x_mean, mean = x_mean, sd = x_sd)\n            x_trueden <- dnorm(x_seq, mean = x_mean, sd = x_sd)\n            lines(x_seq, x_sf*x_trueden, lwd = 3)\n            output$fitted <- renderText({ c(paste(\"Mean = \", x_mean, \"SD = \", x_sd)) })\n        } else {output$fitted <- renderText({ \"\" })}\n        \n        # Return current selections\n        output$return_data_set <- renderText({ data_desc[[idx]] })\n        output$return_bins <- renderText({ paste(input$bins, \"bins\") })\n        output$return_proposed_mean <- renderText({ paste(\"mean = \", input$proposed_mean) })\n        output$return_proposed_sd <- renderText({ paste(\"StDev = \", input$proposed_sd) })\n        output$return_show_fit <- renderText({ paste(\"show fit = \", input$show_fit) })\n        \n        \n    })\n    \n})\n",
    "created" : 1415495330725.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1959089754",
    "id" : "F8467BA",
    "lastKnownWriteTime" : 1415838543,
    "path" : "~/Courses/DataScience/courses/09_DevelopingDataProducts/app_project/Compare_Distributions/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}